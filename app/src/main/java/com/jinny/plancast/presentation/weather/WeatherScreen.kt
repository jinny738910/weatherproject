import android.annotation.SuppressLint
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.layout.width
import androidx.compose.foundation.lazy.LazyRow
import androidx.compose.foundation.lazy.items
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.verticalScroll
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.LocationOn
import androidx.compose.material.icons.filled.Search
import androidx.compose.material3.Button
import androidx.compose.material3.ButtonDefaults
import androidx.compose.material3.Card
import androidx.compose.material3.CardDefaults
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.Icon
import androidx.compose.material3.IconButton
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Scaffold
import androidx.compose.material3.Text
import androidx.compose.material3.TopAppBar
import androidx.compose.material3.TopAppBarDefaults
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.navigation.NavController
import androidx.navigation.compose.rememberNavController
import com.jinny.plancast.domain.model.PlacePrediction
import com.jinny.plancast.domain.model.WeatherCategory
import com.jinny.plancast.domain.model.WeatherInfo
import com.jinny.plancast.domain.repository.PlaceRepository
import com.jinny.plancast.domain.repository.WeatherRepository
import com.jinny.plancast.domain.weatherUseCase.GetShortTermForecastUseCase
import com.jinny.plancast.domain.weatherUseCase.GetUltraShortTermForecastUseCase
import com.jinny.plancast.presentation.weather.WeatherMode
import com.jinny.plancast.presentation.weather.WeatherViewModel


// R.drawable.ic_weather_sun, ic_weather_cloudy Îì±Ïù¥ ÌïÑÏöîÌï©ÎãàÎã§.
// ÏòàÏãúÎ°ú ÏÇ¨Ïö©Ìï† ÏïÑÏù¥ÏΩòÏùÑ drawable Ìè¥ÎçîÏóê Ï∂îÍ∞ÄÌï¥Ï£ºÏÑ∏Ïöî.
// import com.example.weatherapp.R

@Composable
fun WeatherScreen(
    navController: NavController,
    viewModel: WeatherViewModel
) {
    Scaffold(
        topBar = { LocationBar() }
    ) { paddingValues ->
        Column(
            modifier = Modifier
                .padding(paddingValues)
                .fillMaxSize()
                .verticalScroll(rememberScrollState()) // Ï†ÑÏ≤¥ ÌôîÎ©¥ Ïä§ÌÅ¨Î°§
                .padding(horizontal = 16.dp),
            horizontalAlignment = Alignment.CenterHorizontally
        ) {
            WebViewSection(navController = navController, viewModel = viewModel)
            Spacer(modifier = Modifier.height(16.dp))
            CurrentWeatherSection()
            Spacer(modifier = Modifier.height(24.dp))
            RainForecastSection()
            Spacer(modifier = Modifier.height(24.dp))
            HourlyForecastSection()
            Spacer(modifier = Modifier.height(24.dp))
            WeeklyForecastSection()
            Spacer(modifier = Modifier.height(24.dp))
            DetailedInfoSection()
            Spacer(modifier = Modifier.height(16.dp))
        }
    }
}

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun LocationBar() {
    TopAppBar(
        title = {
            Text("ÏÑ±ÎÇ®Ïãú, Î∂ÑÎãπÍµ¨", fontWeight = FontWeight.Bold)
        },
        actions = {
            IconButton(onClick = { /* TODO: Í≤ÄÏÉâ ÌôîÎ©¥ Ïù¥Îèô */ }) {
                Icon(Icons.Default.Search, contentDescription = "ÏßÄÏó≠ Í≤ÄÏÉâ")
            }
        },
        colors = TopAppBarDefaults.topAppBarColors(
            containerColor = Color.Transparent
        )
    )
}

@Composable
fun WebViewSection(navController: NavController, viewModel:WeatherViewModel) {
    Column(horizontalAlignment = Alignment.CenterHorizontally) {
        Button(
            onClick = { /* TODO: ÌòÑÏû¨ ÏúÑÏπò Í∞ÄÏ†∏Ïò§Îäî Î°úÏßÅ Ìò∏Ï∂ú */
                viewModel.onOpenActivityClick()
            },
            modifier = Modifier.fillMaxWidth()
        ) {

            Spacer(modifier = Modifier.size(ButtonDefaults.IconSpacing))
            Text("ÏûêÏÑ∏Ìïú Ï†ïÎ≥¥ Î≥¥Îü¨Í∞ÄÍ∏∞")
        }
    }
}


@Composable
fun CurrentWeatherSection() {
    Column(horizontalAlignment = Alignment.CenterHorizontally) {
        Text("23¬∞", fontSize = 96.sp, fontWeight = FontWeight.Light)
        Row(verticalAlignment = Alignment.CenterVertically) {
            // Image(painterResource(id = R.drawable.ic_weather_sun), contentDescription = "ÎßëÏùå ÏïÑÏù¥ÏΩò")
            Text("‚òÄÔ∏è", fontSize = 32.sp) // ÏïÑÏù¥ÏΩò ÎåÄÏã† ÏûÑÏãú Ïù¥Î™®ÏßÄ ÏÇ¨Ïö©
            Spacer(modifier = Modifier.width(8.dp))
            Text("ÎßëÏùå", fontSize = 24.sp)
        }
        Spacer(modifier = Modifier.height(8.dp))
        Text("ÏµúÍ≥†:25¬∞ / ÏµúÏ†Ä:15¬∞", fontSize = 16.sp, color = Color.Gray)
    }
}

@Composable
fun RainForecastSection() {
    Card(
        shape = RoundedCornerShape(16.dp),
        colors = CardDefaults.cardColors(containerColor = MaterialTheme.colorScheme.surfaceVariant)
    ) {
        Column(modifier = Modifier.padding(16.dp)) {
            Text("üíß Ï¥àÎã®Í∏∞ Í∞ïÏàò ÏòàÎ≥¥", fontWeight = FontWeight.Bold)
            Spacer(modifier = Modifier.height(8.dp))
            Text("ÏïûÏúºÎ°ú 1ÏãúÍ∞Ñ ÎèôÏïà ÎπÑ ÏÜåÏãùÏù¥ ÏóÜÏäµÎãàÎã§.")
            // TODO: ÏãúÍ∞ÑÎåÄÎ≥Ñ Í∞ïÏàò ÌôïÎ•† Í∑∏ÎûòÌîÑÎÇò ÏïÑÏù¥ÏΩò Ï∂îÍ∞Ä
        }
    }
}

@Composable
fun HourlyForecastSection() {
    val hourlyData = listOf(
        Triple("ÏßÄÍ∏à", "‚òÄÔ∏è", "23¬∞"),
        Triple("17Ïãú", "‚òÄÔ∏è", "22¬∞"),
        Triple("18Ïãú", "üå§Ô∏è", "21¬∞"),
        Triple("19Ïãú", "‚òÅÔ∏è", "20¬∞"),
        Triple("20Ïãú", "‚òÅÔ∏è", "19¬∞"),
        Triple("21Ïãú", "üåô", "18¬∞"),
        Triple("22Ïãú", "üåô", "17¬∞"),
    )
    Card(
        shape = RoundedCornerShape(16.dp),
        colors = CardDefaults.cardColors(containerColor = MaterialTheme.colorScheme.surfaceVariant)
    ) {
        Column(modifier = Modifier.padding(16.dp)) {
            Text("‚è≥ ÏãúÍ∞ÑÎåÄÎ≥Ñ ÏòàÎ≥¥", fontWeight = FontWeight.Bold)
            Spacer(modifier = Modifier.height(16.dp))
            LazyRow(horizontalArrangement = Arrangement.spacedBy(24.dp)) {
                items(hourlyData) { (time, icon, temp) ->
                    Column(horizontalAlignment = Alignment.CenterHorizontally) {
                        Text(time, fontSize = 14.sp)
                        Spacer(modifier = Modifier.height(8.dp))
                        Text(icon, fontSize = 28.sp)
                        Spacer(modifier = Modifier.height(8.dp))
                        Text(temp, fontSize = 16.sp, fontWeight = FontWeight.Medium)
                    }
                }
            }
        }
    }
}

@Composable
fun WeeklyForecastSection() {
    val weeklyData = listOf(
        Triple("Ïò§Îäò", "‚òÄÔ∏è", "25¬∞/15¬∞"),
        Triple("Í∏à", "üå§Ô∏è", "24¬∞/16¬∞"),
        Triple("ÌÜ†", "‚òÅÔ∏è", "22¬∞/15¬∞"),
        Triple("Ïùº", "üåßÔ∏è", "20¬∞/14¬∞"),
        Triple("Ïõî", "üå¶Ô∏è", "21¬∞/13¬∞"),
        Triple("Ìôî", "‚òÄÔ∏è", "23¬∞/15¬∞"),
    )
    Card(
        shape = RoundedCornerShape(16.dp),
        colors = CardDefaults.cardColors(containerColor = MaterialTheme.colorScheme.surfaceVariant)
    ) {
        Column(modifier = Modifier.padding(16.dp)) {
            Text("üóìÔ∏è Ï£ºÍ∞Ñ ÏòàÎ≥¥", fontWeight = FontWeight.Bold)
            Spacer(modifier = Modifier.height(8.dp))
            weeklyData.forEach { (day, icon, temp) ->
                Row(
                    modifier = Modifier
                        .fillMaxWidth()
                        .padding(vertical = 8.dp),
                    verticalAlignment = Alignment.CenterVertically,
                    horizontalArrangement = Arrangement.SpaceBetween
                ) {
                    Text(day, modifier = Modifier.weight(1f))
                    Text(icon, fontSize = 24.sp)
                    Text(
                        temp,
                        modifier = Modifier.weight(1f),
                        textAlign = TextAlign.End
                    )
                }
            }
        }
    }
}

@Composable
fun DetailedInfoSection() {
    Card(
        shape = RoundedCornerShape(16.dp),
        colors = CardDefaults.cardColors(containerColor = MaterialTheme.colorScheme.surfaceVariant)
    ) {
        Row(
            modifier = Modifier
                .fillMaxWidth()
                .padding(16.dp),
            horizontalArrangement = Arrangement.SpaceAround
        ) {
            InfoItem("üíß", "ÏäµÎèÑ", "65%")
            InfoItem("üí®", "ÌíçÏÜç", "3 m/s")
            InfoItem("üòé", "ÏûêÏô∏ÏÑ†", "Î≥¥ÌÜµ")
        }
    }
}

@Composable
fun InfoItem(icon: String, label: String, value: String) {
    Column(horizontalAlignment = Alignment.CenterHorizontally) {
        Text(icon, fontSize = 24.sp)
        Spacer(modifier = Modifier.height(4.dp))
        Text(label, fontSize = 12.sp, color = Color.Gray)
        Spacer(modifier = Modifier.height(4.dp))
        Text(value, fontWeight = FontWeight.Bold)
    }
}


private class FakeRepository : WeatherRepository {
    override suspend fun getShortTermForecast(
        baseDate: String,
        baseTime: String,
        nx: Int,
        ny: Int
    ): Result<List<WeatherInfo>> {

        val dummyInfo = listOf(
            WeatherInfo(WeatherCategory.REH, "65","dfsdf","safsd"), // ÏäµÎèÑ
            WeatherInfo(WeatherCategory.WSD, "3.5","dfasf","dfafdd"), // ÌíçÏÜç
            WeatherInfo(WeatherCategory.PTY, "0","dfsa","sdfsdf"), // Í∞ïÏàò ÌòïÌÉú (0: ÏóÜÏùå, 1: ÎπÑ, 2: ÎπÑ/Îàà, 3: Îàà)
            WeatherInfo(WeatherCategory.VEC, "180","fadsf","dfafd"), // ÌíçÌñ•
            WeatherInfo(WeatherCategory.SKY, "1","dafd","fsafd")  // ÌïòÎäò ÏÉÅÌÉú (1: ÎßëÏùå, 3: Íµ¨Î¶ÑÎßéÏùå, 4: ÌùêÎ¶º)
        )

        return if (true) {
            Result.failure(Exception("ÎÑ§Ìä∏ÏõåÌÅ¨ Ïò§Î•ò Î∞úÏÉù"))
        } else {
            Result.success(dummyInfo)
        }
    }

    override suspend fun getUltraShortTermForecast(
        baseDate: String,
        baseTime: String,
        nx: Int,
        ny: Int
    ): Result<List<WeatherInfo>> {
        val dummyInfo = listOf(
            WeatherInfo(WeatherCategory.REH, "65","dfsdf","safsd"), // ÏäµÎèÑ
            WeatherInfo(WeatherCategory.WSD, "3.5","dfasf","dfafdd"), // ÌíçÏÜç
            WeatherInfo(WeatherCategory.PTY, "0","dfsa","sdfsdf"), // Í∞ïÏàò ÌòïÌÉú (0: ÏóÜÏùå, 1: ÎπÑ, 2: ÎπÑ/Îàà, 3: Îàà)
            WeatherInfo(WeatherCategory.VEC, "180","fadsf","dfafd"), // ÌíçÌñ•
            WeatherInfo(WeatherCategory.SKY, "1","dafd","fsafd")  // ÌïòÎäò ÏÉÅÌÉú (1: ÎßëÏùå, 3: Íµ¨Î¶ÑÎßéÏùå, 4: ÌùêÎ¶º)
        )

        return if (true) {
            Result.failure(Exception("ÎÑ§Ìä∏ÏõåÌÅ¨ Ïò§Î•ò Î∞úÏÉù"))
        } else {
            Result.success(dummyInfo)
        }
    }
}


private class FakeShortTermUseCase : GetShortTermForecastUseCase(
    weatherRepository = FakeRepository()
){
    override suspend operator fun invoke(
        baseDate: String,
        baseTime: String,
        nx: Int,
        ny: Int
    ): Result<List<WeatherInfo>> {
        val dummyInfo = listOf(
            WeatherInfo(WeatherCategory.REH, "65","dfsdf","safsd"), // ÏäµÎèÑ
            WeatherInfo(WeatherCategory.WSD, "3.5","dfasf","dfafdd"), // ÌíçÏÜç
            WeatherInfo(WeatherCategory.PTY, "0","dfsa","sdfsdf"), // Í∞ïÏàò ÌòïÌÉú (0: ÏóÜÏùå, 1: ÎπÑ, 2: ÎπÑ/Îàà, 3: Îàà)
            WeatherInfo(WeatherCategory.VEC, "180","fadsf","dfafd"), // ÌíçÌñ•
            WeatherInfo(WeatherCategory.SKY, "1","dafd","fsafd")  // ÌïòÎäò ÏÉÅÌÉú (1: ÎßëÏùå, 3: Íµ¨Î¶ÑÎßéÏùå, 4: ÌùêÎ¶º)
        )

        return if (true) {
            Result.failure(Exception("ÎÑ§Ìä∏ÏõåÌÅ¨ Ïò§Î•ò Î∞úÏÉù"))
        } else {
            Result.success(dummyInfo)
        }
    }
}

private class FakeUltraTermUseCase : GetUltraShortTermForecastUseCase(
    weatherRepository = FakeRepository()
) {
    override suspend operator fun invoke(
        baseDate: String,
        baseTime: String,
        nx: Int,
        ny: Int
    ): Result<List<WeatherInfo>> {
        val dummyInfo = listOf(
            WeatherInfo(WeatherCategory.REH, "65","dfsdf","safsd"), // ÏäµÎèÑ
            WeatherInfo(WeatherCategory.WSD, "3.5","dfasf","dfafdd"), // ÌíçÏÜç
            WeatherInfo(WeatherCategory.PTY, "0","dfsa","sdfsdf"), // Í∞ïÏàò ÌòïÌÉú (0: ÏóÜÏùå, 1: ÎπÑ, 2: ÎπÑ/Îàà, 3: Îàà)
            WeatherInfo(WeatherCategory.VEC, "180","fadsf","dfafd"), // ÌíçÌñ•
            WeatherInfo(WeatherCategory.SKY, "1","dafd","fsafd")  // ÌïòÎäò ÏÉÅÌÉú (1: ÎßëÏùå, 3: Íµ¨Î¶ÑÎßéÏùå, 4: ÌùêÎ¶º)
        )

        return if (true) {
            Result.failure(Exception("ÎÑ§Ìä∏ÏõåÌÅ¨ Ïò§Î•ò Î∞úÏÉù"))
        } else {
            Result.success(dummyInfo)
        }
    }
}


@SuppressLint("ViewModelConstructorInComposable")
@Preview(showBackground = true)
@Composable
fun DefaultPreview() {
    // MaterialThemeÏúºÎ°ú Í∞êÏã∏Ï£ºÎ©¥ ÎØ∏Î¶¨Î≥¥Í∏∞Í∞Ä Îçî Ï†ïÌôïÌï¥ÏßëÎãàÎã§.

    // 2. Create an instance of the ViewModel using the fake UseCases
    val fakeViewModel = WeatherViewModel(
        weatherMode = WeatherMode.WRITE,
        id = -1L,
        getShortTermForecastUseCase = FakeShortTermUseCase(),
        getUltraShortTermForecastUseCase = FakeUltraTermUseCase()
    )

    MaterialTheme {
        WeatherScreen(
            navController = rememberNavController(),
            viewModel = fakeViewModel
        )
    }
}